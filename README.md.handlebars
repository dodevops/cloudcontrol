# CloudControl ‚òÅÔ∏è üß∞

The cloud engineer's toolbox.

## Introduction

*CloudControl* is a [Docker](https://docker.com) based configuration environment containing all the tools required and configured to manage modern cloud infrastructures.

The toolbox comes in cloud flavors. Currently supported cloud flavours are

{{#each docObjects.flavour}}
* {{ this.title }}
{{/each}}

Following features and tools are supported:

{{#each docObjects.feature}}
* {{ this.title }}
{{/each}}

## Table of contents

* [Usage](#usage)
* [FAQ](#faq)
* [Flavours](#flavours)
{{#each docObjects.flavour}}
    * [{{ @key }}](#{{ @key }})
{{/each}}
* [Features](#features)
{{#each docObjects.feature}}
    * [{{ @key }}](#{{ @key }})
{{/each}}
* [Development](#development)
* [Building](#building)

## Usage

*CloudControl* can be used best with docker-compose. Check out the `sample` directory in a flavour for a sample
compose file and to convenience scripts.

Copy the compose file and configure it to your needs. Check below for configuration options per flavour and feature.

Run `init.sh`. This script basically just runs `docker-compose up -d` and immediately calls
`docker-compose logs -f cli` afterwards to start the stack and show the logs of the initialization process.

The initialization process will download and configure the additional tools and completes with a message when its done.
It will run each time when the stack is recreated.

After the initialization process you can simply run `run.sh` or `docker-compose exec cli cloud-control` to jump into
the running container and work with the installed features.

If you want to display a *custom login message* when users enter the container, set then environment variable `MOTD`
to that message. If you want to display the default login message as well, also
set the environment variable `MOTD_DISPLAY_DEFAULT` to *yes*.

## FAQ

### How to forward ports to the host

If you'd like to forward traffic into a cluster using `kubectl port-forward` you can do the following:

* Add a ports key to the cli-service in your docker-compose file to forward a free port on your host to a defined
port in your container (e.g. 12001 on your host to port 12000 in your container):

```
ports:
  - "12001:12000"
```

* Inside *CloudControl*, check the IP of the container:

```
bash-5.0$ ifconfig eth0
eth0      Link encap:Ethernet  HWaddr 02:42:AC:15:00:02
          inet addr:172.21.0.2  Bcast:172.21.255.255  Mask:255.255.0.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:53813 errors:0 dropped:0 overruns:0 frame:0
          TX packets:20900 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:75260363 (71.7 MiB)  TX bytes:2691219 (2.5 MiB)
```

* Use the IP address used by the container as the bind address for port-forward to forward traffic
to the previously defined container port to a service on its port (e.g. port 12000 to the
service my-service listening on port 8080):

```
kubectl port-forward --address 172.21.0.2 svc/my-service 12000:8080
```

* Connect to localhost:12001 on your host

### How to set up command aliases

If you'd like to set up aliases to save some typing, you can use the *run* feature. Run your container with these
environment variables:

* `USE_run=yes`: Set up the run feature
* `RUN_COMMANDS=alias firstalias=command;alias secondalias=command`: Set up some aliases

## Flavours

{{#each docObjects.flavour}}
### {{ @key }}

{{ this.description }}

#### Configuration

{{#each this.configuration}}
* {{ this }}
{{/each}}
{{/each}}

## Features

{{#each docObjects.feature}}
### {{ @key }}

{{ this.description }}

#### Configuration

* USE_{{ @key }}: Enable this feature
{{#each this.configuration }}
* {{ this }}
{{/each}}

{{/each}}

## Development

*CloudControl* supports a decoupled development of features and flavours. If you're missing something, just fork this
repository, create a subfolder for your new feature under "features" and add two files:

* feature.yaml: A descriptor for your feature with a title, a description and configuration notes
* feature.sh: A shell script that is run by the cloud control entrypoint script and should install everything you need
  for your new feature
* motd.sh: (optional) If you want to show some information to the users upon login, put them here.

If you need another flavour (aka cloud provider), add a new subdirectory under "flavour" and add a flavour.yaml describing
your flavour the same way as a feature. For the rest of the files, please check out existing flavours for details. Please,
include a sample configuration for your flavour to make it easier for other people to work with it.

## Building

Build a flavor container image with the base of the repository as the build context like this:

    docker build -f flavour/azure/Dockerfile .
